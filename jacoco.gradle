apply plugin: 'jacoco'

def flavor = "debug"
def unitTestTask = "testDebugUnitTest"

jacoco {
    toolVersion = "0.8.5"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

final Collection<String> androidExcludes =
        ["**/R.class",
         "**/R\$*.class",
         "**/BuildConfig.*",
         "**/Manifest*.*",
         "**/*Test*.*",
         'android/**/*.*'].asImmutable()

final Collection<String> dagger2Excludes =
        ["**/*_MembersInjector.class",
         "**/Dagger*Component.class",
         "**/Dagger*Component\$Builder.class",
         "**/*Module_*Factory.class",
         "**/*_Provide*Factory*.*",
         "**/*_Factory*.*"].asImmutable()

final Collection<String> viewsExcludes = ["**/*Activity*.*",
                                          "**/*Fragment*.*",
                                          "**/*ViewHolder*.*"].asImmutable()


task jacocoTestReport(type: JacocoReport, dependsOn: "${unitTestTask}") {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = (androidExcludes + dagger2Excludes + viewsExcludes).asImmutable()
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/${flavor}/classes",
            excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/${flavor}/",
            excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree], [kotlinDebugTree])
    executionData.from = fileTree(dir: project.buildDir, includes: ["jacoco/${unitTestTask}.exec"])
}
